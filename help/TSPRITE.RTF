{\rtf1\ansi \deff0\deflang1024
{\fonttbl
{\f0\fswiss MS SANS SERIF;}}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;}
{\stylesheet
{\fs20 \sbasedon0\snext0 Normal;}
{\s1 \b\fs20 \sbasedon0\snext0 Emphasized;}
{\s2 \qc \fs28\cf13 \sbasedon0\snext0 Topic Heading;}
{\s3 \b\fs24\cf13 \sbasedon0\snext0 Paragraph Title;}
{\s4 \fi-274\li274 \tx274 \fs20 \sbasedon0\snext0 Bullet 1;}
{\s5 \fi-547\li547 \tx547 \fs20 \sbasedon0\snext0 Hanging Indent 1;}
{\s6 \qc\sb48\sa48 \fs28\cf13 \sbasedon0\snext0 Topic Heading, Nonscroll;}
{\s7 \sb48\sl2 \fs28\cf13 \sbasedon0\snext0 Nonscroll 2;}
{\s8 \li2520 \tx2520 \fs16 \sbasedon0\snext0 Property Description;}
{\s9 \li2160 \tx2160 \ul\fs20 \sbasedon0\snext0 Property Name;}}
{\info
{\title TSPRITE.RTF}
{\author The Help Magician}
{\operator kucmierz t}
{\doccomm }
{\creatim\yr18\mo8\dy5\hr18\min34}
{\revtim\yr18\mo8\dy5\hr18\min34}
{\version2}
{\edmins873}
{\nofpages4}
{\nofwords65536}
{\nofchars65536}
{\vern16433}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0
\widowctrl\ftnbj \sectd \linex0\endnhere 
\pard \plain \f0\fs20 {\plain \f0\fs16\up6\lang1033 ${\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 $} Contents}}
{\plain \f0\fs16\up6\lang1033 #{\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 #} ComponentMain}}
\plain\fs20 \par 
\qc \{bmc tsprite.bmp\} \par 
\ql \par 
\qc \{bmc tspritea.bmp\}\par 
\ql \par 
\qc \b\ul Professional Delphi 32 Sprite Animation Components\par 
\ql \b0\ul0 \par 
\ri720\li720 TSprite is a graphic component for Borland Delphi. TSprite features native transparent bitmaps at all stages. TSprite can be used to create reactable bitmaps and graphic buttons that change flickerless when a mouse moves over the object, disabling reaction in transparent region - zero lines of code required. TSprite controls mouse cursor and thus vitually allows to create buttons of any shape.  Together with TSpriteAnimate canvas object overlapping TSprites can be animated together in flickerless fluid animations over transparent backgrounds.\par 
\pard \par 
\qc \cf11\b {\strike TSprite}{\v TSprite}\par 
\ql \cf1\b0 \par 
\qc \cf11\b {\strike TSpriteAnimate}{\v TSprite}\par 
\ql \cf1\b0 \par 
\qc \cf11\b {\strike Register}{\v Register}\par 
\ql \cf1\b0 \par 
\ri720\li720\qc TSprite and TSpriteAnimate were tested under Borland Delphi 2.0 and Delphi 3.0 and should work with Borland C++ Builder also.\par 
\pard \ql \par 
\qc \fs16 (c) Daniel Doubrovkine - Stolen Technologies Inc.\par 
e-mail: dblock@infomaniak.ch\par 
http://www.infomaniak.ch/~dblock\par 
University of Geneva - All Rights Reserved\par 
Switzerland - 1997\par 
all names are registered trademarks of their respective owners\par 
\fs20 \pard\plain \page \pard \plain \f0\fs20 {\plain \f0\fs16\up6\lang1033 ${\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 $} TSprite}}
{\plain \f0\fs16\up6\lang1033 #{\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 #} TSprite}}
\plain\fs20\b \par 
\qc \b0 \{bmc tsprite.bmp\}\par 
\ql \par 
TSprite's most simple ability is to display transparent bitmaps. Set \b BitmapLow\b0  \fs16 (low stands for default bitmap)\fs20  to the picture you wish to display and the \b TransparentColor\b0  to it's transparent color. \par 
\par 
With TSprite-s you can virtually make buttons of any shape: if you wish to make a reactable bitmap, that is a bitmpap that changes flickerless when a mouse moves over it, assign a bitmap to the \b BitmapHigh\fs16\b0  \fs20 property and set the \b Reactable\b0  property to True. If you wish the whole picture to react, the \b EntireReact\b0  property should be True, otherwise, if you want no reaction when the mouse moves over a transparent part, set the \b EntireReact\b0  property to false.\par 
\par 
All TSprites in your application use a common reaction thread that dispatches mouse movements through TSprites; this allows maximum reactions even in heavily stuffed applications. \fs16 Reaction thread creation and destruction is all automatic and you don't have to worry about it. Still, if you need to destroy the reaction thread (so no more TSprites react, it is called ReactManager. You should kill the thread as follows: \b ReactManager.Kill\b0 , so all cleanups are done as they should be. You are discouraged to use the ReactManager variable, which is subject to change without notice. Do not destroy the ReactManager yourself with ReactManager.Destroy method, this may lead to unpredictable results.)\par 
\fs20 \par 
Please read the \cf11 {\strike TSpriteAnimate}{\v TSpriteAnimate}\cf1  component description for TSprite animation control.\par 
\par 
\li1440 \fs16 Properties\par 
\li1800 (reaction and drawing)\par 
\li2160  \fs20\ul Reactable\par 
\li2520 \fs16\ul0 if True and BitmapHigh is set, the picture will change to BitmapHigh when the mouse moves over it; note that the EntireReact property influences reaction zone.\par 
\li2160 \fs20\ul BitmapLow\par 
\li2520 \fs16\ul0 default bitmap of the TSprite\par 
\li2160 \fs20\ul BitmapHigh\par 
\li2520 \fs16\ul0 reaction bitmap of the TSprite\par 
\li2160 \fs20\ul Cursor\par 
\li2520 \fs16\ul0 mouse cursor when the mouse moves over the TSprite, depends also on the EntireReact property\par 
\li2160 \fs20\ul EntireReact\par 
\li2520 \fs16\ul0 when True, OnEnter event and bitmap reaction will occur in the bounds of Left, Top, Width and Height properties, when False, moving the mouse over a transparent section of the bitmap will produce no effect\par 
\li2160 \fs20\ul TransparentColor\par 
\li2520 \fs16\ul0 transparent color of the BitmapLow and BitmapHigh\par 
\li2160 \fs20\ul ShowBorder, BorderStyle, BorderColor, BorderWidth\par 
\li2520 \fs16\ul0 set and adjust the border style and visibility around the TSprite\par 
\li1800 (animation, when \cf11 {\strike SpriteAnimator}{\v TSpriteAnimate}\cf1  is assigned)\par 
\li2160 \fs20\ul Cycle\par 
\li2520 \fs16\ul0 if Cycle is True then once an animation is finished, it will start over again\par 
\li2160 \fs20\ul ImageList\par 
\li2520 \fs16\ul0 animation images, when set, images will be taken from the ImageList, one after another, allowing to produce an animation; BitmapLow and BitmapHigh have no effect when ImageList is set; the first image from the ImageList stands for BitmapLow and no reactions are possible\par 
\li2160 \fs20\ul MaskX\par 
\li2520 \fs16\ul0 horizontal mask for animation - give an impression of a sprite coming from behind a mask\par 
\li2160 \fs20\ul MaskY\par 
\li2520 \fs16\ul0 vertical mask for animation\par 
\li2160 \fs20\ul MoveHorizontal\par 
\li2520 \fs16\ul0 horizontal displacement (animate, move horizontally)\par 
\li2160 \fs20\ul MoveSteps\par 
\li2520 \fs16\ul0 animation steps, the bitmap(s) will be moved MoveHorizontal and MoveVertical pixels in MoveSteps steps\par 
\li2160 \fs20\ul MoveVertical\par 
\li2520 \fs16\ul0 vertical displacement (animate, move vertically)\par 
\li2160 \fs20\ul Paused\ul0  \fs16 (read-only)\par 
\li2520 allows to retreive the state of an animation, use TSprite.Pause and TSprite.Resume to set the Paused value\par 
\li2160 \fs20\ul Reverse\par 
\li2520 \fs16\ul0 set Reverse to True to animate in reverse direction (start from StartLeft + MoveHorizontal, StartTop + MoveVertical)\par 
\li2160 \fs20\ul Remove\par 
\li2520 \fs16\ul0 set Remove to True to remove the sprite from the animator when the animation is finished (Cycle must be set to False); if False, the sprite will remain at it's last position\par 
\li2160 \fs20\ul SpriteAnimator\par 
\li2520 \fs16\ul0 TSpriteAnimator, animations are done in the SpriteAnimator canvas. An animated TSprite cannot be reactable, it won't even be visible on it's original position, but only in the animator's canvas.\par 
\li2160 \fs20\ul StartLeft\par 
\li2520 \fs16\ul0 X position to start animation (in SpriteAnimator canvas)\par 
\li2160 \fs20\ul StartTop\par 
\li2520 \fs16\ul0 Y position to start animation (in SpriteAnimator canvas)\par 
\li1440 Methods\par 
\li2160 \fs20\ul StepForward\ul0 (aDc: HDC)\par 
\li2520 \fs16 used by the SpriteAnimator, performs the next step in animation and draws results on the passed device context; you can use this function to perform a parallel animation, a slower one for example\par 
\li2160 \fs20\ul React\ul0 (aPoint: TPoint)\par 
\li2520 \fs16 react the TSprite on a position; TSprite reacts when the coordinates are over it (check the EntireReact property)\par 
\li2160 \fs20\ul Pause\par 
\li2520 \fs16\ul0 pause the animation of the sprite\par 
\li2160 \fs20\ul Resume\par 
\li2520 \fs16\ul0 resume the animation of the sprite\par 
\li2160 \fs20\ul Restart\par 
\li2520 \fs16\ul0 restart the animation of the sprite\par 
\li1440 Events\par 
\li2160 \fs20\ul OnEnter\par 
\li2520 \fs16\ul0 perform an action when the mouse "enters" the TSprite (the first OnMouseMove event)\par 
\li2160 \fs20\ul OnExit\par 
\li2520 \fs16\ul0 perform an action when the mouse "exits" the TSprite (the last OnMouseMove event)\par 
\li2160 \fs20\ul OnShow\par 
\li2520 \fs16\ul0 perform an action when the TSprite is painted for the first time (when it becomes active)\par 
\li2160 \fs20\ul OnStart\par 
\li2520 \fs16\ul0 executed before the first frame of the sprite is performed\par 
\li2160 \fs20\ul OnEnd\par 
\li2520 \fs16\ul0 executed after the last frame of the sprite is performed, the sprite restarts the animation if Cycle is True\par 
\li2160 \fs20\ul OnStepForward\par 
\li2520 \fs16\ul0 executed at each frame of animation\par 
\pard \fs20 \par 
\qc \fs16 (c) 1997 - Daniel Doubrovkine - Stolen Technologies Inc.\par 
dblock@infomaniak.ch - http://www.infomaniak.ch/~dblock\fs20 \par \pard\plain \page \pard \plain \f0\fs20 {\plain \f0\fs16\up6\lang1033 ${\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 $} TSpriteAnimate}}
{\plain \f0\fs16\up6\lang1033 #{\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 #} TSpriteAnimate}}
\plain\fs20\b \par 
\qc \b0 \{bmc tspritea.bmp\}\par 
\ql \par 
TSpriteAnimate is the \cf11 {\strike TSprite}{\v TSprite}\cf1 -s animator. TSpriteAnimator is a transparent TGraphicControl component, a canvas that groups TSprite-s and animates them flickerless all together frame by frame. To enable animation, \b Enabled\b0  must be set to True. \b AnimateInterval\b0  defines the minimum interval to wait for the next frame of the animation in milliseconds.\par 
\par 
An animation is performed inside the TSpriteAnimate canvas \fs16 (a device context: a structure that defines a set of graphic objects and their associated attributes, and the graphic modes that affect output).\fs20  \par 
\par 
TSprites should define \b TSprite.SpriteAnimator\b0  property to a valid TSpriteAnimate object in order to be animated. Since animation adjustments are made on the TSprite and not on it's animator, you can define as many TSprite-s as you want for a single animation. The order of creation of TSprites defines the oder of TSprites on the animator canvas, and there's no problem intersecting moves of TSprites in the same TSpriteAnimate canvas. For a TSprite, images are taken one by one at each step of animation from the \b TSprite.ImageList property \b0 if defined (recursively), otherwise the \b TSprite.BitmapLow\b0  is used constantly. \par 
\par 
Each TSprite will move horizontally and verticaly depending on the \b TSprite.MoveHorizontal\b0  and \b TSprite.MoveVertical \b0 properties starting with the \b TSprite.StartLeft \b0 and \b TSprite.StartTop \b0 position \fs16 (inside the animator's canvas)\fs20  performing a total of  \b TSprite.MoveSteps\b0  steps.  \par 
\par 
You can create fixed objects in the TSpriteAnimate canvas and give an effect of sprites floating behind a fixed setting: set the \b TSprite.MoveHorizontal\b0 , \b TSprite.MoveVertical\b0 , \b TSprite.MoveSteps\b0  properties to zero and define the \b TSprite.StartLeft\b0  and \b TSprite.StartTop\b0  position accordingly. \par 
\par 
Animation will recycle if  the \b TSprite.Cycle\b0  property is set to True. Animation will run in the reverse direction (starting from \b TSprite.StartLeft\b0  + \b TSprite.MoveHorizontal\b0 , \b TSprite.StartTop \b0 + \b TSprite.MoveVertical\b0  point) if the \b TSprite.Reverse\b0  property is set to True.\par 
\par 
The TSpriteAnimator will mask a part of a TSprite defined by \b TSprite.MaskX\b0  and \b TSprite.MaskY\b0  which allows to create an effect of a sprite coming out of behind a mask.\par 
\par 
\fs16 TSpriteAnimate is flickerless and transparent. TSpriteAnimate does not use a standard Delphi timer, but a native thread, which seems to be about ten times less resource consuming under Windows NT. All TSpriteAnimate-s use the same timer. (If you want to stop all animations, use \b AnimateTimer.Kill \b0 so all cleanups are made as they should. You are discouraged to use the AnimateTimer variable which is subject to change without notice.)\par 
\par 
\li1440 Properties\par 
\li2160 \fs20\ul Enabled\par 
\li2520 \fs16\ul0 enable / disable the animation, must be enabled in order to see something\par 
\li2160 \fs20\ul AnimateInterval\par 
\li2520 \fs16\ul0 animation interval (frame pause)\par 
\li2160 \fs20\ul Paused\fs16\ul0  (read-only)\par 
\li2520 returns True if the animation was Paused (does not depend from the Enabled property)\par 
\li1440 Methods\par 
\li2160 \fs20\ul Pause\par 
\li2520 \fs16\ul0 pause the animation\par 
\li2160 \fs20\ul Resume\par 
\li2520 \fs16\ul0 resume the animation\par 
\li2160 \fs20\ul IsRegisteredControl(Sprite: TGraphicControl): boolean\par 
\li2520 \fs16\ul0 returns True if a TSprite is being animated (this does not mean that the sprite has not finished an animation, but that the animator dispatches the StepForward method through the TSprite)\par 
\li2160 \fs20\ul RegisterControl(Sprite: TGraphicControl)\par 
UnRegisterControl(Sprite: TGraphicControl)\par 
\li2520 \fs16\ul0 used internally for registering and unregistering TSprite controls for animation, do not use unless you really understand what you are doing: if you want to remove a TSprite from an animation, use aSprite.SpriteAnimator.UnregisterControl(aSprite). If you simply want to pause an animation, use TSprite.Pause and TSprite.Resume.\par 
\par 
\pard \qc (c) 1997 - Daniel Doubrovkine - Stolen Technologies Inc.\par 
dblock@infomaniak.ch - http://www.infomaniak.ch/~dblock\fs20 \par \pard\plain \page \qc\sb46\sa46\keepn \plain \f0\fs20 {\plain \f0\fs16\up6\lang1033 ${\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 $} Register}}
{\plain \f0\fs16\up6\lang1033 #{\footnote \pard\plain \f0\fs20\lang1033 {\fs16\up6 #} Register}}
\plain\fs28\cf13 Register!\par 
\pard \ql \fs20\cf1 \par 
\qc \fs24\cf13\b How can you register?\par 
\ql \fs20\cf1\b0 \par 
TSprite and TSpriteAnimate are shareware. Registering will enable you to receive new releases, future updates and full support. Registering will also disable the white mask painted over the bitmaps. For questions and comments, please e-mail\b  dblock@infomaniak.ch.\b0  Latest releases can always be found at \b http://www.infomaniak.ch/~dblock.\par 
\b0 \par 
S.T.I. uses Kagi services for software registration which is very convenient for both the group and the registering users. The price for a single user licence for TSpriteAnimate and TSprite is of 15.- US$. This gives you the ability to use the components inside your code, royalty free. Simply launch the \b Register\b0  program attached and follow instructions on the screen. Kagi accepts cash, checks, money orders, VISA, MasterCard, American Express and First Virtual Payements. It can also issue invoices. Detailed help is available from the registration program. You can register online at \b http://order.kagi.com/?VP\b0 .\par 
\par 
If you live in Switzerland or prefer to make a direct bank transfer, send a check or the cash amount to the author, please send it to:\par 
\par 
\qc Daniel Doubrovkine\par 
11, chemin de la Clairi\'E8re, \par 
1207 Geneva, Switzerland\par 
tel & fax: 41 (0) 22 735 69 47\par 
e-mail: dblock@infomaniak.ch\par 
account No. with the Swiss Bank Corporation: C2-112.610\par 
\ql \par 
\qc \fs16 note: Register for Windows program is (c) Grzegorz (Greg) Kochaniak\par 
\fs20 \pard\plain }
